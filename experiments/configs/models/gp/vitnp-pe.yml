model:
  _target_: tnp.models.gridded_tnp.GriddedTNP
  encoder: ${swintnp_encoder}
  decoder: ${tnp_decoder}
  likelihood: ${likelihood}

swintnp_encoder:
  _target_: tnp.models.gridded_tnp.GriddedTNPEncoder
  transformer_encoder: ${transformer_encoder}
  grid_encoder: ${grid_encoder}
  xy_encoder: ${xy_encoder}
  x_encoder: ${x_encoder}

transformer_encoder:
  _target_: tnp.networks.transformer.GriddedTransformerEncoder
  grid_decoder: ${grid_decoder}
  mhsa_layer: ${mhsa_layer}
  num_layers: ${params.num_layers}
  patch_encoder: ${patch_encoder}

patch_encoder:
  _target_: tnp.networks.patch_encoders.PatchEncoder
  input_grid: ${params.grid_encoder_grid_shape}
  output_grid: ${params.patch_encoder_grid_shape}
  embed_dim: ${params.embed_dim}

mhsa_layer:
  _target_: tnp.networks.attention_layers.MultiHeadSelfAttentionLayer
  embed_dim: ${params.embed_dim}
  num_heads: ${params.num_heads}
  head_dim: ${params.head_dim}
  feedforward_dim: ${params.embed_dim}
  norm_first: ${params.norm_first}
  linear: ${params.linear_attention}

x_encoder:
  _target_: tnp.networks.mlp.MLPWithEmbedding
  embeddings:
    - ${x1_encoder}
    - ${x2_encoder}
  in_dim: ${eval:'${x1_encoder.num_wavelengths} + ${x2_encoder.num_wavelengths}'}
  out_dim: ${params.x_embed_dim}
  num_layers: 0
  width: ${params.x_embed_dim}

x1_encoder:
  _target_: tnp.networks.embeddings.FourierEmbedding
  lower: 0.01
  upper: ${eval:'${params.grid_range}[0][1] - ${params.grid_range}[0][0]'}
  assert_range: False
  num_wavelengths: ${params.num_wavelengths}
  active_dim: 0

x2_encoder:
  _target_: tnp.networks.embeddings.FourierEmbedding
  lower: 0.01
  upper: ${eval:'${params.grid_range}[1][1] - ${params.grid_range}[1][0]'}
  assert_range: False
  num_wavelengths: ${params.num_wavelengths}
  active_dim: 1

xy_encoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${eval:'1 + ${params.dim_y} + ${params.x_embed_dim}'}
  out_dim: ${params.embed_dim}
  num_layers: 2
  width: ${params.embed_dim}

tnp_decoder:
  _target_: tnp.models.tnp.TNPDecoder
  z_decoder: ${z_decoder}

z_decoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${params.embed_dim}
  out_dim: ${eval:'2 * ${params.dim_y}'}
  num_layers: 2
  width: ${params.embed_dim}

likelihood:
  _target_: tnp.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 5.0e-4

params:
  epochs: 500
  embed_dim: 128
  num_heads: 8
  head_dim: 16
  norm_first: True
  num_layers: 5
  linear_attention: False
  num_wavelengths: 64
  x_embed_dim: 128
  grid_encoder_grid_shape: [64, 64]
  patch_encoder_grid_shape: [32, 32]
  top_k_ctot: 9
  roll_dims: null
  use_nn: True
  dist_fn: 
    _target_: tnp.utils.distances.sq_dist
    _partial_: True


misc:
  name: VITNP-PE-L${params.num_layers}-H${params.num_heads}-D${params.embed_dim}-GS1${params.grid_encoder_grid_shape}-GS2${params.patch_encoder_grid_shape}-K${params.top_k_ctot}
  resume_from_checkpoint: null
  gradient_clip_val: 0.5
  plot_interval: 1
  logging: True
