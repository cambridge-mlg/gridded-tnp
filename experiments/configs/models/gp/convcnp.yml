model:
  _target_: tnp.models.convcnp.ConvCNP
  encoder: ${convcnp_encoder}
  decoder: ${tnp_decoder}
  likelihood: ${likelihood}

convcnp_encoder:
  _target_: tnp.models.convcnp.ConvCNPEncoder
  conv_net: ${cnn}
  grid_encoder: ${setconv_encoder}
  grid_decoder: ${setconv_decoder}
  z_encoder: ${z_encoder}

setconv_encoder:
  _target_: tnp.networks.grid_encoders.SetConv
  dims: ${params.dim_x}
  grid_range: ${params.grid_range}
  points_per_dim: ${params.grid_encoder_grid_shape}
  dist_fn: ${params.dist_fn}
  use_nn: ${params.use_nn}

setconv_decoder:
  _target_: tnp.networks.grid_decoders.SetConvGridDecoder
  dim: ${params.dim_x}
  dist_fn: ${params.dist_fn}

z_encoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${eval:'${params.dim_y} + 1'}
  out_dim: ${params.num_channels}
  num_layers: 2
  width: ${params.num_channels}

tnp_decoder:
  _target_: tnp.models.tnp.TNPDecoder
  z_decoder: ${z_decoder}

z_decoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${params.num_channels}
  out_dim: ${eval:'2 * ${params.dim_y}'}
  num_layers: 2
  width: ${params.num_channels}

likelihood:
  _target_: tnp.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 5.0e-4

params:
  epochs: 500
  grid_encoder_grid_shape: [32, 32]
  use_nn: True
  dist_fn:
    _target_: tnp.utils.distances.sq_dist
    _partial_: True

misc:
  name: ConvCNP-G${params.grid_encoder_grid_shape}-L${params.num_blocks}-C${params.num_channels}-K${params.kernel_size}
  resume_from_checkpoint: null
  gradient_clip_val: 0.5
  plot_interval: 10
  logging: True
